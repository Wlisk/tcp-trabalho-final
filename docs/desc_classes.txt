Classe Game:
    // É a classe principal, que instancia o jogo. É responsável pela lógica do jogo em si, e a verificação e tratamento de inputs do usuário.
    // Também interage com a classe Scene para renderizar o jogo graficamente, e possui instâncias de Player/Boss para o andamento do jogo.

    Atributos:
        - numFloors: int
        - player: Player
        - currentFloor: int 
        - bosses[]: Boss
        - gameState: int
        - score: int
        - scene: Scene
    Métodos:
        + openGame(): void // Chamado pela main, abre a janela de jogo no menu inicial
        + startGame(): void // Inicia de fato o jogo e suas variáveis
        - checkInputs(): void // Verifica inputs do usuário (cliques e apertos de tecla), tratando-os como necessário
        - nextTurn(): void // Avança um turno no jogo
        - initializeBosses(): Boss[]
        - initializePlayer(): Player
        + endGame(): void // Chamado assim que o jogador morre ou chega ao final da Dungeon, finaliza o jogo e retorna ao menu inicial
        + closeGame(): void // Fecha a janela do jogo

Classe Scene:
    // É a classe responsável por renderizar os gráficos do jogo. Utiliza classes e funções da Jaylib (um binding da Raylib para Java). 
    // Separada da classe Game, porém possui uma relação de dependência com ela.
    // (Por exemplo, para desenhar a interface, é necessário receber Player e o Boss atual como argumentos, para desenhar a barra de vida). 

    Atributos:
        - spritePlayer: texture(raylib)
        - spriteBosses[]: texture(raylib)
        - spriteItems[]: texture(raylib)
        - spritesWeapons[]: texture(raylib)
        - spritesArmors[]: texture(raylib)
    Métodos:
        + loadTextures(): void // Chamado ao abrir o jogo, carrega as texturas utilizando funções LoadTexture() da raylib
        + unloadTextures(): void // Descarrega as texturas ao fim do jogo
        + renderFrame(): void // Renderiza um frame utilizando funções da raylib, e as funções abaixo
        - drawInterface(Player, Boss): void
        - drawPlayer(Player): void
        - drawInventory(Inventory): void
        - drawBoss(Boss): void
        - drawButtons(): void

Classe Character:
    // Classe geral para um personagem no jogo. É especializada entre Player e Boss, pois seus atributos e métodos são comuns à ambos.
    Atributos:
        - hp: int
        - mp: int
        - baseDefence: int
        - baseDamage: int
        - baseCritChance: double
        - baseAccuracy: double
        - alive: bool
    Métodos:
        + (static)randomDouble(double, double): double // Função auxiliar que gera um double aleatório, usado para verificar se um hit acerta ou não, ou se é crítico
        + defend(): void
        + checkHit(): bool // Verifica se um ataque acerta ou não
        - die(): void 

Classe Player:
    // Classe que representa o jogador. Seus métodos são, em geral, ações que o jogador pode tomar ao interagir com o jogo.
    // Possui relação de agregamento com inventory. (O inventário é "parte" do Jogador, e não faz sentido existir sem ele).
    // Também está relacionada com Boss, pois podem se atacar.
    Atributos:
        - level: int
        - exp: int
        - expToLevel: int
        - inventory: Inventory
        - class: string

    Métodos:
        - initializePlayer(string): void // Chamada pelo construtor, inicializa um jogador com certos atributos, dependendo da classe (passada como string)
        + levelUp(): void // Chamada assim que exp seja maior que expToLevel, incrementa o nível do jogador e aumenta seus atributos base
        + useItem(Item): void
        + attack(Boss): void
        + special1(Boss): void
        + special2(Boss): void
        + special3(Boss): void
        - calculateDamage(): int // Utilizado dentro das funções de ataque para calcular o dano de um ataque

Classe Boss:
    // Classe que representa um inimigo. Seus métodos são ações que o inimigo toma durante uma batalha.
    // Tem relaçionamento de associação-composição com Weapon, Consumable e Armor, pois podem dropar estes itens ao serem derrotados.
    // Está relacionado com Player, pois ambos podem se atacar.
    Atributos:
        - name: string
        - expReward: int
        - consumableReward: Consumable
        - weaponReward: Weapon
        - armorReward: Armor

    Métodos:
        + chooseAction(): void
        - attackPlayer(Player): void
        - calculateDamage(): int

Classe Inventory:
    // Classe que representa o inventário do jogador. Possui relação de associação-composição com Weapon, Consumable e Armor, sendo eles parte do inventário do jogador, porém,
    // aindo existindo fora do relacionamento (o inventário pode estar vazio, e chefes podem ter equipamento que dropam, por exemplo).
    Atributos:
        - weapon: Weapon
        - armor: Armor
        - consumables[]: Consumable
        - maxConsumables: int

    Métodos:
        + addConsumable(Consumable): void // Adiciona um consumível no inventário, chamado ao ser recebido
        + removeConsumable(Consumable): void // Remove um consumível do inventário, chamado ao ser consumido
        + switchWeapon(Weapon): void // Chamado ao receber uma nova arma de um Boss e decidir trocar pela sua atual.
        + switchArmor(Armor): void

Classe Weapon:
    // Classe representando uma arma que o jogador pode equipar. Não possui métodos além dos getters e setters, pois as operações relevantes sobre seus dados ocorrem na classe Jogador.
    Atributos:
        - name: string
        - type: string
        - damageMultiplier: double
        - accuracyMultiplier: double
        - critMultiplier: double

    Métodos:
        //

Classe Consumable:
    // Classe representando um consumível que o jogador pode usar. Não possui métodos além dos getters e setters, pois as operações relevantes sobre seus dados ocorrem na classe Jogador.
    Atributos:
        - name: string
        - hpBoost: int // Quantidade de hp que uma poção recupera
        - mpBoost: int

    Métodos:
        //

Classe Armor:
    // Classe representando uma armadura que o jogador pode equipar. Não possui métodos além dos getters e setters, pois as operações relevantes sobre seus dados ocorrem na classe Jogador.
    Atributos:
        - name: string
        - type: string
        - defence: int // Defesa que a armadura adiciona

    Métodos:
        //